Exercice : Gestion avancée d'une liste d'utilisateurs

Contexte : Vous travaillez sur une plateforme e-commerce. Les utilisateurs peuvent s'inscrire, acheter des produits et laisser des commentaires. Vous voulez écrire une fonction pour gérer ces utilisateurs.

Données initiales :

const utilisateurs = [
    { id: 1, nom: "Alice", email: "alice@email.com", achats: [100, 50, 200] },
    { id: 2, nom: "Bob", email: "bob@email.com", achats: [50, 50] },
    // ... d'autres utilisateurs
];

1. Destructuration, valeurs par défaut et paramètres optionnels :

Créez une fonction afficheResume qui prend un utilisateur et affiche un résumé de ses informations. L'achat est un paramètre optionnel. Si l'utilisateur n'a pas d'achats, considérez qu'il n'en a pas effectué.

2. Rest Operator :

Écrivez une fonction ajouterAchats qui accepte un utilisateur et un nombre indéterminé d'achats, puis ajoute ces achats à la liste des achats de l'utilisateur.

3. Spread Operator :

Supposons que vous ayez une promotion où vous voulez offrir un article gratuit d'une valeur de 20€ à chaque utilisateur. Utilisez le spread operator pour ajouter cet achat à chaque utilisateur.

4. Challenge Combiné :

Créez une fonction fusionUtilisateurs qui accepte deux tableaux d'utilisateurs, fusionne les deux listes et pour les utilisateurs ayant le même email, combine leurs achats.

Conseil : Vous aurez probablement besoin de map, find, et le spread operator pour cela.